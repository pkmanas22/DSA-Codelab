// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum ProblemDifficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  imageUrl String?
  role     UserRole @default(USER)

  problems       Problem[]
  submissions    Submission[]
  problemsSolved ProblemSolved[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Problem {
  id          String            @id @default(uuid())
  userId      String
  title       String
  description String
  difficulty  ProblemDifficulty
  tags        String[]
  examples    Json
  constraints String
  companies   String[]
  hints       String?
  editorial   String?

  testcases          Json
  codeSnippets       Json
  referenceSolutions Json

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  submissions Submission[]
  solvedBy    ProblemSolved[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String?
  time          String?
  memory        String?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testcaseResults TestcaseResults[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TestcaseResults {
  id             String  @id @default(uuid())
  submissionId   String
  testCaseNumber Int
  isPassed       Boolean
  stdin          String
  stdout         String?
  expectedOutput String
  stderr         String?
  compileOutput  String?
  status         String?
  time           String?
  memory         String?

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([submissionId])
}

model ProblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, problemId])
}
